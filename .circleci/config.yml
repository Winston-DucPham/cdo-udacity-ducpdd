version: 2.1

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>

            
jobs:

  npm-install-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: |
            echo "$TYPEORM_HOST"
            echo "$TYPEORM_CONNECTION"
            $TYPEORM_HOST  > .env
            $TYPEORM_CONNECTION > .env
            $TYPEORM_ENTITIES > .env
            $TYPEORM_HOST > .env
            cat .env
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  npm-install-frontend:
   docker:
      - image: cimg/node:13.8.0
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm run build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Front-end Unit Test
          working_directory: ./frontend
          command: |
            npm install
            npm run test
                
  test-backend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end Unit Test
          working_directory: ./backend
          command: |
            npm install
            npm run test

  scan-frontend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: front-end Audit Scan
          working_directory: ./frontend
          command: |
            npm install
            npm install oauth-sign@^0.9.0
            

  scan-backend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: back-end Audit Scan
          working_directory: ./backend
          command: |
            echo "bypass"
            #cd backend
            # npm install
            # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL in kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl https://kvdb.io/Auxmtykjfs15P7PdU5oabz/backend_url  -d "http://$BACKEND_IP:3030"

      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    docker:
      - image: cimg/python:3.12.0-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: 
            - "a2:11:43:b9:d9:be:64:d6:56:af:a7:60:87:08:ef:65"
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            # apk add --update ansible
            sudo apt update
            sudo apt install software-properties-common  -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory -vvv configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl --location --request GET 'https://kvdb.io/Auxmtykjfs15P7PdU5oabz/backend_url')
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # - destroy_environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail
      # - revert_migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail


  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "a2:11:43:b9:d9:be:64:d6:56:af:a7:60:87:08:ef:65"
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory
            ansible-playbook -i inventory -vvv deploy-server.yml 
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            export TYPEORM_HOST=udacity-devops-ducpdd.cgscfam5qreo.us-east-1.rds.amazonaws.com
            echo "$TYPEORM_HOST"
            echo "$TYPEORM_CONNECTION"
            TYPEORM_HOST  > .env
            TYPEORM_CONNECTION > .env
            TYPEORM_ENTITIES > .env
            TYPEORM_HOST > .env
            cat .env
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migrations_dump.txt
            then
              echo "DB migration was successful, will update kvdb..."
              curl https://kvdb.io/Auxmtykjfs15P7PdU5oabz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'success'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl https://kvdb.io/Auxmtykjfs15P7PdU5oabz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'failed'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

        
workflows:
  default:
    jobs:
      - npm-install-backend
      - npm-install-frontend
      - build-backend:
          requires:
            - npm-install-backend
      - build-frontend:
          requires:
            - npm-install-frontend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          filters:
              branches:
                only:
                  - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]